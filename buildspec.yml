version: 0.2
env:
  secrets-manager:
    SOURCE_SERVER_NAME: $SECRET_ARN_1:POSTGRES_HOST
    SOURCE_DATABASE_NAME: $SECRET_ARN_1:POSTGRES_DATABASE
    SOURCE_USERNAME: $SECRET_ARN_1:POSTGRES_USER
    SOURCE_PASSWORD: $SECRET_ARN_1:POSTGRES_PASSWORD
    TARGET_SERVER_NAME: $SECRET_ARN_2:POSTGRES_HOST
    TARGET_DATABASE_NAME: $SECRET_ARN_2:POSTGRES_DATABASE
    TARGET_USERNAME: $SECRET_ARN_2:POSTGRES_USER
    TARGET_PASSWORD: $SECRET_ARN_2:POSTGRES_PASSWORD
phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      - npm install -g pg-compare
      - apt update
      - apt install make curl jq postgresql-client-14 -y
      - echo "Installing Terraform"
      - curl -o terraform.zip https://releases.hashicorp.com/terraform/0.15.5/terraform_0.15.5_linux_amd64.zip
      - unzip terraform.zip -d /usr/local/bin/
      - terraform --version
  pre_build:
    commands:
      - echo Installing source NPM pg-compare...
      - ls
      - echo Modifying pg-compare Schema
      - sudo cp -r pg-compare/Schema.js /usr/local/lib/node_modules/pg-compare/lib
      - JSON=`cat compareDBs.json`
      - echo $JSON
      - echo $JSON |
          jq --arg source_host "${SOURCE_SERVER_NAME}" '.connection1.host = $source_host' |
          jq --arg source_db "${SOURCE_DATABASE_NAME}" '.connection1.database = $source_db' |
          jq --arg source_user "${SOURCE_USERNAME}" '.connection1.user = $source_user' |
          jq --arg source_pw "${SOURCE_PASSWORD}" '.connection1.password = $source_pw' |
          jq --arg target_host "${TARGET_SERVER_NAME}" '.connection2.host = $target_host' |
          jq --arg target_db "${TARGET_DATABASE_NAME}" '.connection2.database = $target_db' |
          jq --arg target_user "${TARGET_USERNAME}" '.connection2.user = $target_user' |
          jq --arg target_pw "${TARGET_PASSWORD}" '.connection2.password = $target_pw' > compareDBs.json
      - cat compareDBs.json

  build:
    commands:
    # Tests 1
      - pg-compare compareDBs.json
      - ls
      - cat delta.sql
      - match=$(sh pg-compare-test.sh)
      - |
        if [ $match = 'YES']; then
          echo "The databases match"
        elif [ $match = 'NO' ]
          echo "The databases do not match. Starting replication..."
        else
          echo "pg compare has issues..."
        fi
      - echo Execute pg-dump

  post_build:
    commands:
      - echo Build completed on `date`  
